generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                     @id @default(autoincrement())
  email             String                  @unique
  name              String?
  password          String
  role              Role                    @default(Employee)
  quotations        Quotation[]
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  status            UserStatus              @default(ACTIVE)
  assignedCountries UserCountryAssignment[]
}

model Quotation {
  id          String @id @default(uuid())
  quotationNo String @unique

  clientName    String?
  clientEmail   String?
  clientPhone   String?
  clientAddress String?
  travelDate    DateTime
  groupSize     Int
  totalNights   Int      @default(0)

  place String?

  flightCostPerPerson Float?
  landCostPerPerson   Float?
  totalCostPerPerson  Float?
  totalGroupCost      Float?

  flightImageUrl String?

  notes String?

  packageId Int?
  package   Package? @relation(fields: [packageId], references: [id])

  createdBy   User            @relation(fields: [createdById], references: [id])
  createdById Int
  status      QuotationStatus @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  mealPlanId Int?
  mealPlan   MealPlan? @relation(fields: [mealPlanId], references: [id])

  accommodations QuotationAccommodation[]
  transfers      QuotationTransfer[]
  itinerary      QuotationItinerary[]
  inclusions     QuotationInclusion[]
  exclusions     QuotationExclusion[]
  activities     QuotationActivity[]
}

model QuotationAccommodation {
  id          Int       @id @default(autoincrement())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String

  location  String
  hotelName String
  roomType  String
  nights    Int
  price     Float
}

model QuotationTransfer {
  id          Int       @id @default(autoincrement())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String

  type        String
  vehicleName String?
  price       Float
}

model QuotationItinerary {
  id          Int       @id @default(autoincrement())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  dayTitle    String
  description String
}

model QuotationInclusion {
  id          Int       @id @default(autoincrement())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  item        String
}

model QuotationExclusion {
  id          Int       @id @default(autoincrement())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  item        String
}

model QuotationActivity {
  id          Int       @id @default(autoincrement())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String

  name       String
  transfer   String?
  adultPrice Float
  childPrice Float?
  quantity   Int     @default(1)
  totalPrice Float
}

model InclusionTemplate {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
}

model ExclusionTemplate {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
}

enum Role {
  Employee
  Admin
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  CANCELLED
}

enum ServiceType {
  HOTEL
  FLIGHT
  TOUR
  INSURANCE
  VEHICLE
  PACKAGE
  MEAL
  OTHER
}

enum UserStatus {
  ACTIVE
  LOCKED
  SUSPENDED
  INACTIVE
}

model Destination {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  state       String?
  countryId   Int?
  country     Country? @relation(fields: [countryId], references: [id])
  description String?
  imageUrl    String?

  packages Package[]
  hotels   Hotel[]
}

model Hotel {
  id                Int          @id @default(autoincrement())
  name              String
  starRating        Int?
  amenities         String?
  mealPlan          String?      @default("No")
  source            String?
  countryId         Int?
  country           Country?     @relation(fields: [countryId], references: [id])
  destinationId     Int?
  destination       Destination? @relation(fields: [destinationId], references: [id])
  basePricePerNight Float?

  rateCards HotelRateCard[]
  // Accommodation Accommodation[]
}

model HotelRateCard {
  id       Int    @id @default(autoincrement())
  hotel    Hotel  @relation(fields: [hotelId], references: [id])
  hotelId  Int
  roomType String
  season   String
  rate     Float
}

model Transfer {
  id         Int      @id @default(autoincrement())
  type       String
  priceInINR Float
  countryId  Int
  country    Country  @relation(fields: [countryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MealPlan {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  description   String?
  ratePerPerson Float
  countryId     Int
  country       Country     @relation(fields: [countryId], references: [id])
  quotations    Quotation[]
}

model Package {
  id                 Int     @id @default(autoincrement())
  name               String
  description        String?
  durationDays       Int
  basePricePerPerson Float
  totalNights        Int

  packageItineraries PackageItinerary[]
  quotations         Quotation[]
  Destination        Destination?       @relation(fields: [destinationId], references: [id])
  destinationId      Int?
}

model PackageItinerary {
  id          Int     @id @default(autoincrement())
  package     Package @relation(fields: [packageId], references: [id])
  packageId   Int
  dayNumber   Int
  title       String
  description String
}

model MarkupRule {
  id          Int         @id @default(autoincrement())
  serviceType ServiceType
  percentage  Float
}

model Activity {
  id               Int      @id @default(autoincrement())
  name             String
  transfer         String?
  ticketPriceAdult Float
  ticketPriceChild Float?
  countryId        Int
  country          Country  @relation(fields: [countryId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Country {
  id                Int                     @id @default(autoincrement())
  code              String                  @unique
  name              String
  flag              String
  currency          String
  destinations      Destination[]
  countryCurrencies CountryCurrency[]
  hotels            Hotel[]
  transfers         Transfer[]
  activities        Activity[]
  mealPlans         MealPlan[]
  airports          Airport[]
  users             UserCountryAssignment[]
}

model CountryCurrency {
  id             Int      @id @default(autoincrement())
  countryId      Int
  currencyCode   String
  conversionRate Float
  baseCurrency   String
  targetCurrency String
  updatedAt      DateTime @updatedAt

  country Country @relation(fields: [countryId], references: [id])

  @@unique([countryId, currencyCode])
}

model Airport {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  city      String
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCountryAssignment {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  country    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId  Int
  assignedAt DateTime @default(now())

  @@id([userId, countryId])
}
