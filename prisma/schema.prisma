generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  name       String?
  password   String
  role       Role        @default(Employee)
  quotations Quotation[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     UserStatus  @default(ACTIVE)
}

model Quotation {
  id               String   @id @default(uuid())
  quotationNo      String   @unique
  travelDate       DateTime
  groupSize        Int
  mealPlan         String?
  place            String?
  vehicleUsed      String?
  localVehicleUsed String?
  flightCost       Float?
  flightImageUrl   String?
  landCostPerHead  Float?
  totalPerHead     Float?
  totalGroupCost   Float?
  clientPhone      String?
  clientName       String?
  clientEmail      String?
  clientAddress    String?

  notes       String?
  totalNights Int     @default(0)

  // —— NEW foreign‑keys to admin tables ——
  packageId Int?
  package   Package? @relation(fields: [packageId], references: [id])

  destinationId Int?
  destination   Destination? @relation(fields: [destinationId], references: [id])

  flightRoute String?

  intercityVehicleId Int?
  intercityVehicle   Transfer? @relation("IntercityVehicle", fields: [intercityVehicleId], references: [id])

  localVehicleId Int?
  localVehicle   Transfer? @relation("LocalVehicle", fields: [localVehicleId], references: [id])

  mealPlanId  Int?
  mealPlanRef MealPlan? @relation(fields: [mealPlanId], references: [id])

  createdBy   User            @relation(fields: [createdById], references: [id])
  createdById Int
  status      QuotationStatus @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  accommodation Accommodation[]
  itinerary     ItineraryItem[]
  inclusions    Inclusion[]
  exclusions    Exclusion[]
}

model Accommodation {
  id          Int       @id @default(autoincrement())
  location    String
  hotelName   String
  nights      Int
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String

  hotelId Int?
  hotel   Hotel? @relation(fields: [hotelId], references: [id])
}

model ItineraryItem {
  id          Int       @id @default(autoincrement())
  dayTitle    String
  description String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String
}

model Inclusion {
  id          Int       @id @default(autoincrement())
  item        String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String

  templateId Int?
  template   InclusionTemplate? @relation(fields: [templateId], references: [id])
}

model Exclusion {
  id          Int       @id @default(autoincrement())
  item        String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String

  templateId Int?
  template   ExclusionTemplate? @relation(fields: [templateId], references: [id])
}

enum Role {
  Employee
  Admin
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  CANCELLED
}

enum ServiceType {
  HOTEL
  FLIGHT
  TOUR
  INSURANCE
  VEHICLE
  PACKAGE
  MEAL
  OTHER
}

enum UserStatus {
  ACTIVE
  LOCKED
  SUSPENDED
  INACTIVE
}

model Destination {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  state       String?
  countryId   Int?
  country     Country? @relation(fields: [countryId], references: [id])
  description String?
  imageUrl    String?

  packages   Package[]
  quotations Quotation[]
  hotels     Hotel[]
}

model Hotel {
  id                Int          @id @default(autoincrement())
  name              String
  starRating        Int?
  amenities         String?
  mealPlan          String?      @default("No")
  source            String?
  countryId         Int?
  country           Country?     @relation(fields: [countryId], references: [id])
  destinationId     Int?
  destination       Destination? @relation(fields: [destinationId], references: [id])
  basePricePerNight Float?

  rateCards     HotelRateCard[]
  Accommodation Accommodation[]
}

model HotelRateCard {
  id       Int    @id @default(autoincrement())
  hotel    Hotel  @relation(fields: [hotelId], references: [id])
  hotelId  Int
  roomType String
  season   String
  rate     Float
}

model Transfer {
  id         Int      @id @default(autoincrement())
  type       String
  priceInINR Float
  countryId  Int
  country    Country  @relation(fields: [countryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  intercityVehicleQuotations Quotation[] @relation("IntercityVehicle")
  localVehicleQuotations     Quotation[] @relation("LocalVehicle")
}

model MealPlan {
  id            Int     @id @default(autoincrement())
  name          String  @unique
  description   String?
  ratePerPerson Float
  countryId     Int
  country       Country @relation(fields: [countryId], references: [id])

  quotations Quotation[]
}

model InclusionTemplate {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  inclusions  Inclusion[]
}

model ExclusionTemplate {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  exclusions  Exclusion[]
}

model Package {
  id                 Int     @id @default(autoincrement())
  name               String
  description        String?
  durationDays       Int
  basePricePerPerson Float
  totalNights        Int

  packageItineraries PackageItinerary[]
  quotations         Quotation[]
  Destination        Destination?       @relation(fields: [destinationId], references: [id])
  destinationId      Int?
}

model PackageItinerary {
  id          Int     @id @default(autoincrement())
  package     Package @relation(fields: [packageId], references: [id])
  packageId   Int
  dayNumber   Int
  title       String
  description String
}

model MarkupRule {
  id          Int         @id @default(autoincrement())
  serviceType ServiceType
  percentage  Float
}

model Activity {
  id               Int      @id @default(autoincrement())
  name             String
  transfer         String?
  ticketPriceAdult Float
  ticketPriceChild Float?
  countryId        Int
  country          Country  @relation(fields: [countryId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Country {
  id                Int               @id @default(autoincrement())
  code              String            @unique
  name              String
  flag              String
  currency          String
  destinations      Destination[]
  countryCurrencies CountryCurrency[]
  hotels            Hotel[]
  transfers         Transfer[]
  activities        Activity[]
  mealPlans         MealPlan[]
}

model CountryCurrency {
  id             Int      @id @default(autoincrement())
  countryId      Int
  currencyCode   String
  conversionRate Float
  baseCurrency   String
  targetCurrency String
  updatedAt      DateTime @updatedAt

  country Country @relation(fields: [countryId], references: [id])

  @@unique([countryId, currencyCode])
}
